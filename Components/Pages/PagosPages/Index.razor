@page "/Pagos/Index"
@inject ClienteServices clientesService
@inject PagosCXCService pagosCXCService
@inject OrdenVentaService ordenVentaService
@inject DeudaService deudasService
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Pagos</PageTitle>
<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">

		<div class="text-left">
			<h2 class="text-black"><i class="bi bi-person-plus m-1"></i> Pagos</h2>
		</div>
	</div>
	<div class="col text-end">
		<a href="/Pagos/Create" class="btn btn-secondary"><i class="bi bi-plus-lg"></i> Crear Pago</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body">
			<div class="row">
				<div class="col-4">
					<div class="input-group" style="width: 250px">
						<div class="form-floating">
							<InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
								<option value="" selected disabled>--- Selecciona ---</option>
								<option value="idpago">ID Pago</option>
								<option value="idcxc">ID CxC</option>
								<option value="fechapago">Fecha de Pago</option>
								<option value="cliente">Cliente</option>
							</InputSelect>
							<label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
						</div>
						@*btn restablecer*@
						<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
					</div>
				</div>

				@*Btn Buscar*@
				<div class="col">
					<div class="input-group" style="width: 500px">
						@*textbox buscar*@
						<div class="form-floating d-flex align-items-center">
							<InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
							<label for="floatingSearch">Buscar</label>
						</div>
						<button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
					</div>
				</div>
			</div>

			@if (valorFiltro == "fechapago")
			{
				<br />
				<div class="row">
					<div class="col">
						<div class="form-floating">
							<InputDate id="desde" class="form-control" @bind-Value=Desde></InputDate>
							<label for="desde"><strong>Fecha Inicial</strong></label>
						</div>
					</div>

					<div class="col">
						<div class="form-floating">
							<InputDate id="hasta" class="form-control" @bind-Value=Hasta></InputDate>
							<label for="hasta"><strong>Fecha Final</strong></label>
						</div>
					</div>
				</div>
			}

			<br />

			<table class="table table-striped table-hover">
				<thead class="table table-striped ">
					<tr class="text-center ">
						<th>ID Pago</th>
						<th>ID CxC</th>
						<th>Cliente</th>
						<th>Descripción</th>
						<th>Monto pagado</th>
						<th>Metodo de Pago</th>
						<th>Fecha de Último Pago</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var pago in ListaPagos)
					{
						<tr class="text-center text-white">
							<td>@pago.Id</td>
							<td>@pago.Deuda?.CXCId</td>
							<td>@pago.Deuda?.OrdenVenta?.Clientes?.Nombre</td>
							<td>@pago.Descripcion</td>
							<td>RD$@pago.MontoPagado.ToString("N2")</td>
							<td>
								@switch (pago.MetodoPagoId)
								{
									case 1:
										<span class="badge text-bg-info">Tarjeta</span>
										break;
									case 2:
										<span class="badge btn-success">Efectivo</span>
										break;
									case 3:
										<span class="badge text-bg-primary">Cheque</span>
										break;
									default:
										<span class="badge text-bg-secondary">N/A</span>
										break;
								}
							</td>
							<td>@pago.FechaPago.ToString("dd/M/yyyy")</td>
							<td class="text-center">
								<a href="/Pagos/View/@pago.Id" class="btn btn-outline-dark bi-eye"></a>
								<a href="/Pagos/Edit/@pago.Id" class="btn btn-outline-dark bi-pencil"></a>
							</td>
						</tr>
					}
				</tbody>
				<caption>Cant. De Pagos: @ListaPagos.Count</caption>
			</table>
		</div>
	</div>
</div>

@if (mostrarModal)
{
	<div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header" style="background-color: #7B0323; color: white;">
					<h5 class="modal-title">Eliminar Cliente</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>¿Está seguro de que desea eliminar a este cliente?</p>
					<p>Esta opción no se puede deshacer.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
					<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

<style>
	body {
		background-color: #f5f5f5;
	}

	.btn-success {
		background-color: #0d5c63;
		border: none;
	}
</style>

@code {
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public DateTime? Desde { get; set; } = null;
	public DateTime? Hasta { get; set; } = null;
	public List<PagosCXC> ListaPagos { get; set; } = new List<PagosCXC>();
	public List<CuentasXCobrar> ListaCXC { get; set; } = new List<CuentasXCobrar>();
	public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();
	public List<OrdenVenta> ListaOrdenVenta { get; set; } = new List<OrdenVenta>();

	protected override async Task OnInitializedAsync()
	{
		ListaPagos = await pagosCXCService.Listar(C => true);
		ListaClientes = await clientesService.Listar(C => true);
		ListaCXC = await deudasService.Listar(C => true);
		ListaOrdenVenta = await ordenVentaService.Listar(C => true);
	}

	// MODALS
	private bool mostrarModal = false;
	private int ClienteIdSeleccionado { get; set; }
	private string EmailClienteSelecionado { get; set; } = "";

	private void MostrarModal(int clienteId, string clienteEmail)
	{
		ClienteIdSeleccionado = clienteId;
		EmailClienteSelecionado = clienteEmail;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		ClienteIdSeleccionado = 0;
		EmailClienteSelecionado = "";
	}

	public async Task Eliminar()
	{
		try
		{
			// OJO: cuando sea necesario se descomentara este codigo
			//
			// var user = await UserManager.FindByEmailAsync(EmailClienteSelecionado);
			// if (user == null)
			// 	return;
			// await UserManager.DeleteAsync(user);

			await clientesService.Eliminar(ClienteIdSeleccionado);
			ListaPagos = await pagosCXCService.Listar(x => true);
			mostrarModal = false;
			ClienteIdSeleccionado = 0;
			TipoNotificacion = ToastType.Success;
			TituloNotificacion = "Enhorabuena";
			MensajeNotificacion = "¡Se ha eliminado el cliente exitosamente!";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
		catch (Exception ex)
		{
			TipoNotificacion = ToastType.Danger;
			TituloNotificacion = "Error";
			MensajeNotificacion = "Hubo un error al eliminar el cliente.";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
	}

	//NOTIFICACIONES
	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
	=> toastService.Notify(new(tipo, titulo, cuerpo));

	// Filtro de busqueda
	public async Task Buscar()
	{
		if (string.IsNullOrEmpty(valorFiltro))
		{
			TipoNotificacion = ToastType.Warning;
			TituloNotificacion = "Aviso";
			MensajeNotificacion = "Debe seleccionar una opción en el fitro.";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
			ListaPagos = await pagosCXCService.Listar(x => true);
			return;
		}

		searchBarValue.Trim().ToLower();

		switch (valorFiltro)
		{
			case "idpago":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un ID de pago para buscar";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				if (!searchBarValue.All(char.IsDigit))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "El criterio de búsqueda solo puede alojar numeros.";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				if (int.TryParse(searchBarValue, out int id))
					ListaPagos = await pagosCXCService.Listar(lt => lt.Id == id);
				break;

			case "idcxc":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un ID de CXC para buscar";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				if (!searchBarValue.All(char.IsDigit))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "El criterio de búsqueda solo puede alojar numeros.";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaPagos = await pagosCXCService.Listar(lt => lt.CXCId.ToString() == searchBarValue);
				break;

			case "cliente":
				if (string.IsNullOrEmpty(searchBarValue))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Debe proveer un nombre para buscar";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				if (searchBarValue.Any(char.IsDigit))
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "El criterio de búsqueda solo puede alojar letras";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaPagos = await pagosCXCService.Listar(c => c.Deuda.OrdenVenta.Clientes.Nombre == searchBarValue);
				break;

			case "fechapago":
				if (Desde == null || Hasta == null)
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "Ambos campos de las fechas deben llenarse.";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				if (Desde > Hasta)
				{
					TipoNotificacion = ToastType.Warning;
					TituloNotificacion = "Aviso";
					MensajeNotificacion = "La fecha inicial no puede ser mayor a la final.";
					MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
					return;
				}
				ListaPagos = await pagosCXCService.Listar(x => x.FechaPago >= Desde && x.FechaPago <= Hasta);
				break;

			default:
				ListaPagos = await pagosCXCService.Listar(x => true);
				break;
		}
	}

	public async Task Restablecer()
	{
		ListaPagos = await pagosCXCService.Listar(x => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;
		Desde = null;
		Hasta = null;

		TipoNotificacion = ToastType.Info;
		TituloNotificacion = "Aviso";
		MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
		MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
	}
}
