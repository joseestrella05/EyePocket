@page "/TarjetaPunto/Index"
@inject T_PuntosServices tarjetaPuntosService
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Tarjetas de Puntos</PageTitle>
<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">
		<div class="text-left">
			<h2 class="text-black"><i class="bi bi-person-plus m-1"></i> Tarjetas de Puntos</h2>
		</div>
	</div>
	<div class="col" style="">
		<a href="/TarjetaPunto/Create" class="btn btn-secondary">Crear nueva tarjeta</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body">
			<div class="row">
				<div class="col-4">
					<div class="input-group" style="width: 250px">
						<div class="form-floating">
							<InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
								<option value="" selected disabled>--- Selecciona ---</option>
								<option value="idtarjeta">ID Tarjeta</option>
								<option value="nombre">Nombre Cliente</option>
								<option value="tipotarjeta">Tipo de Tarjeta</option>
							</InputSelect>
							<label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
						</div>
						<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
					</div>
				</div>

				<div class="col">
					<div class="input-group" style="width: 500px">
						<div class="form-floating d-flex align-items-center">
							<InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
							<label for="floatingSearch">Buscar</label>
						</div>
						<button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
					</div>
				</div>
			</div>

			<br />

			<table class="table table-light table-hover">
				<thead class="table table-striped ">
				<tr class="text-center ">
					<th>ID</th>
					<th>Nombre Cliente</th>
					<th>Tipo de Tarjeta</th>
					<th>Puntos</th>
					<th>Fecha de Creación</th>
					<th>Estado</th>
					<th>Acciones</th>
				</tr>
				</thead>
				<tbody>
				@foreach (var tarjeta in ListaTarjetas)
				{
					<tr class="text-center text-white">
						<td>@tarjeta.TarjetaId</td>
						<td>@tarjeta.NombreCliente</td>
						<td>@tarjeta.TipoTarjeta</td>
						<td>@tarjeta.Puntos</td>
						<td>@tarjeta.FechaCreacion.ToString("dd/M/yyyy")</td>
						<td>@tarjeta.Estado</td>
						<td class="text-center">
							<a href="/TarjetaPuntos/Details/@tarjeta.TarjetaId" class="btn btn-outline-dark bi-eye"></a>
							<a href="/TarjetaPuntos/Edit/@tarjeta.TarjetaId" class="btn btn-outline-info bi bi-pencil-square"></a>
							<button type="button" @onclick="() => MostrarModal(tarjeta.TarjetaId, tarjeta.NombreCliente)" class="btn btn-outline-danger bi bi-trash"></button>
						</td>
					</tr>
				}
				</tbody>
				<caption>Cant. de Tarjetas: @ListaTarjetas.Count</caption>
			</table>
		</div>
	</div>
</div>

@if (mostrarModal)
{
	<div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header" style="background-color: #7B0323; color: white;">
					<h5 class="modal-title">Eliminar Tarjeta</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>¿Está seguro de que desea eliminar esta tarjeta de puntos?</p>
					<p>Esta opción no se puede deshacer.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
					<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

@code {
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public List<TarjetaPuntos> ListaTarjetas { get; set; } = new List<TarjetaPuntos>();

	protected override async Task OnInitializedAsync()
	{
		ListaTarjetas = await tarjetaPuntosService.Listar(t => true);
	}

	private bool mostrarModal = false;
	private int TarjetaIdSeleccionado { get; set; }
	private string NombreClienteSeleccionado { get; set; } = "";

	private void MostrarModal(int tarjetaId, string nombreCliente)
	{
		TarjetaIdSeleccionado = tarjetaId;
		NombreClienteSeleccionado = nombreCliente;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		TarjetaIdSeleccionado = 0;
		NombreClienteSeleccionado = "";
	}

	public async Task Eliminar()
	{
		try
		{
			await tarjetaPuntosService.Eliminar(TarjetaIdSeleccionado);
			ListaTarjetas = await tarjetaPuntosService.Listar(x => true);
			mostrarModal = false;
			MostrarToast(ToastType.Success, "Enhorabuena", "¡Se ha eliminado la tarjeta exitosamente!");
		}
		catch (Exception)
		{
			MostrarToast(ToastType.Danger, "Error", "Hubo un error al eliminar la tarjeta.");
		}
	}

	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
		=> toastService.Notify(new(tipo, titulo, cuerpo));

	public async Task Buscar()
	{
		if (string.IsNullOrEmpty(valorFiltro))
		{
			MostrarToast(ToastType.Warning, "Aviso", "Debe seleccionar una opción en el filtro.");
			ListaTarjetas = await tarjetaPuntosService.Listar(x => true);
			return;
		}

		searchBarValue = searchBarValue.Trim().ToLower();

		switch (valorFiltro)
		{
			case "idtarjeta":
				if (!int.TryParse(searchBarValue, out int tarjetaId))
				{
					MostrarToast(ToastType.Warning, "Aviso", "El ID de tarjeta debe ser un número.");
					return;
				}
				ListaTarjetas = await tarjetaPuntosService.Listar(t => t.TarjetaId == tarjetaId);
				break;
			case "nombre":
				ListaTarjetas = await tarjetaPuntosService.Listar(t => t.NombreCliente.ToLower().Contains(searchBarValue));
				break;
			case "tipotarjeta":
				ListaTarjetas = await tarjetaPuntosService.Listar(t => t.TipoTarjeta.ToLower().Contains(searchBarValue));
				break;
		}
	}

	private void Restablecer()
	{
		valorFiltro = string.Empty;
		searchBarValue = string.Empty;
		ListaTarjetas = tarjetaPuntosService.Listar(t => true).Result;
	}
}