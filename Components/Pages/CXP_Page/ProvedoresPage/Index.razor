@page "/CxP/Provedores/Index"
@inject ProvedoresServices provedoresService
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ToastService toastService

<PageTitle>Proveedores</PageTitle>
<div class="row bg-white p-3 m-2">
    <div class="col">
        <h2 class="text-black fs-3"><i class="bi bi-person-badge m-1"></i> Proveedores</h2>
    </div>
    <div class="col text-end">
        <a href="/CxP/Provedores/Create" class="btn btn-md btn-secondary">Crear nuevo proveedor</a>
    </div>
</div>

<div class="container-fluid">
    <div class="card w-100 mx-auto p-3">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <div class="form-floating">
                            <InputSelect class="form-select" id="floatingSelect" @bind-Value="@valorFiltro">
                                <option value="" selected disabled>--- Selecciona ---</option>
                                <option value="id">ProvedorID</option>
                                <option value="Nombres">Nombre</option>
                                <option value="Correo">Email</option>
                            </InputSelect>
                            <label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
                        </div>
                        <button type="button" class="btn btn-md btn-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <div class="form-floating d-flex align-items-center">
                            <InputText @bind-Value="@searchBarValue" class="form-control" id="floatingSearch" />
                            <label for="floatingSearch">Buscar</label>
                        </div>
                        <button @onclick="Buscar" class="btn btn-md btn-secondary bi bi-search" type="button"></button>
                    </div>
                </div>
            </div>

            <div style="overflow-x: auto;">
                <table class="table table-light table-hover text-center">
                    <thead class="table-striped">
                        <tr>
                            <th>ID</th>
                            <th>Nombre</th>
                            <th>Contacto</th>
                            <th>Email</th>
                            <th>Dirección</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var provedores in ListaProvedores)
                        {
                            <tr>
                                <td>@provedores.ProvedorId</td>
                                <td>@provedores.Nombre</td>
                                <td>@($"({provedores.Telefono?[..3]}) {provedores.Telefono?[3..6]}-{provedores.Telefono?[6..]}")</td>
                                <td>@provedores.Correo</td>
                                <td>@provedores.Direccion</td>
                                <td class="d-flex justify-content-center gap-2">
                                    <a href="/CxP/Provedores/Details/@provedores.ProvedorId" class="btn btn-outline-dark bi-eye btn-md"></a>
                                    <a href="/CxP/Provedores/Edit/@provedores.ProvedorId" class="btn btn-outline-info bi bi-pencil-square btn-md"></a>
                                    <button type="button" @onclick="() => MostrarModal(provedores.ProvedorId, provedores.Correo)" class="btn btn-outline-danger bi bi-trash btn-md"></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <caption>Cant. De Clientes: @ListaProvedores.Count</caption>
                </table>
            </div>
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-md modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Eliminar Proveedor</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar este proveedor?</p>
                    <p>Esta acción no se puede deshacer.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

<style>
    h2 {
        font-size: 2rem;
    }

    .table th, .table td {
        font-size: 1rem;
        padding: 12px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 1rem;
    }
</style>



@code {
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public List<Provedores> ListaProvedores { get; set; } = new List<Provedores>();
	private bool mostrarModal = false;
	private int ProvedoreIdSeleccionado { get; set; }
	private string EmailProvedoresSelecionado { get; set; } = "";

	//NOTIFICACIONES
	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ListaProvedores = await provedoresService.Listar(C => true);
	}

	private void MostrarModal(int provedoreId, string provoresEmail)
	{
		ProvedoreIdSeleccionado = provedoreId;
		EmailProvedoresSelecionado = provoresEmail;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		ProvedoreIdSeleccionado = 0;
		EmailProvedoresSelecionado = "";
	}

	private async Task Buscar()
	{
		if (!string.IsNullOrWhiteSpace(valorFiltro))
		{
			if (valorFiltro == "id" && int.TryParse(valorFiltro, out int ProvedoreId))
			{
				ListaProvedores = await provedoresService.Listar(s => s.ProvedorId == ProvedoreId);
			}
			else if (valorFiltro == "Nombre")
			{
				ListaProvedores = await provedoresService.Listar(s => s.Nombre.ToLower().Contains(valorFiltro.ToLower()));
			}
			else if (valorFiltro == "Telefono")
			{
				ListaProvedores = await provedoresService.Listar(s => s.Telefono.ToLower().Contains(valorFiltro.ToLower()));
			}

		}
		else
		{
			ListaProvedores = await provedoresService.Listar(p => true);
		}
	}

	public async Task Eliminar()
	{
		try
		{
			await provedoresService.Eliminar(ProvedoreIdSeleccionado);
			ListaProvedores = await provedoresService.Listar(x => true);
			mostrarModal = false;
			ProvedoreIdSeleccionado = 0;
			TipoNotificacion = ToastType.Success;
			TituloNotificacion = "Enhorabuena";
			MensajeNotificacion = "¡Se ha eliminado el provedor exitosamente!";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
		catch (Exception ex)
		{
			TipoNotificacion = ToastType.Danger;
			TituloNotificacion = "Error";
			MensajeNotificacion = "Hubo un error al eliminar el provedor.";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
	}

	public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
	=> toastService.Notify(new(tipo, titulo, cuerpo));

	public async Task Restablecer()
	{
		ListaProvedores = await provedoresService.Listar(x => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;

		TipoNotificacion = ToastType.Info;
		TituloNotificacion = "Aviso";
		MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
		MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
	}
}
