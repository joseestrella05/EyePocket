@page "/CxP/Compra/Index"
@inject ProvedoresServices provedoresService
@inject CompraServices compraService
@inject EstadoServices estadoService
@rendermode InteractiveServer
@inject NavigationManager navigation
@inject ToastService toastService

<PageTitle>Compra</PageTitle>
<div class="row bg-white p-3 m-2">
    <div class="col">
        <h2 class="text-black fs-3"><i class="bi bi-person-badge m-1"></i> Compra</h2>
    </div>
    <div class="col text-end">
        <a href="/CxP/Compra/Create" class="btn btn-md btn-secondary">Crear nueva compra</a>
    </div>
</div>

<div class="container-fluid">
    <div class="card w-100 mx-auto p-3">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <div class="form-floating">
                            <InputSelect class="form-select" id="floatingSelect" @bind-Value="@valorFiltro">
                                <option value="" selected disabled>--- Selecciona ---</option>
                                <option value="id">CompraId</option>
                            </InputSelect>
                            <label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
                        </div>
                        <button type="button" class="btn btn-md btn-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <div class="form-floating d-flex align-items-center">
                            <InputText @bind-Value="@searchBarValue" class="form-control" id="floatingSearch" />
                            <label for="floatingSearch">Buscar</label>
                        </div>
                        <button @onclick="Buscar" class="btn btn-md btn-secondary bi bi-search" type="button"></button>
                    </div>
                </div>
            </div>

            <div style="overflow-x: auto;">
                <table class="table table-light table-hover text-center">
                    <thead class="table-striped">
                        <tr>
                            <th>ID</th>
                            <th>Proveedor</th>
                            <th>Estado</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var compras in ListaCompra)
                        {
                            var provedor = ListaProvedores.FirstOrDefault(t => t.ProvedorId == compras.ProvedorId);
                            var estado = ListaEstados.FirstOrDefault(c => c.EstadoId == compras.EstadoId);
                            <tr>
                                <td>@compras.CompraId</td>
                                <td>@(provedor?.Nombre ?? "no encontrado")</td>
                                <td>@(estado?.Nombre ?? "no encontrado")</td>
                                <td class="d-flex justify-content-center gap-2">
                                    <a href="/CxP/Compra/Details/@compras.CompraId" class="btn btn-outline-dark bi-eye btn-md"></a>
                                    <a href="/CxP/Compra/Edit/@compras.CompraId" class="btn btn-outline-info bi bi-pencil-square btn-md"></a>
                                    <button type="button" @onclick="() => MostrarModal(compras.CompraId, compras.Descripcion)" class="btn btn-outline-danger bi bi-trash btn-md"></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <caption>Cant. De compras: @ListaCompra.Count</caption>
                </table>
            </div>
        </div>
    </div>
</div>

@if (mostrarModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-md modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">Eliminar Compra</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                </div>
                <div class="modal-body">
                    <p>¿Está seguro de que desea eliminar esta compra?</p>
                    <p>Esta acción no se puede deshacer.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

<style>
    h2 {
        font-size: 2rem;
    }

    .table th, .table td {
        font-size: 1rem;
        padding: 12px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 1rem;
    }
</style>

@code {
    public string searchBarValue { get; set; } = string.Empty;
    public string valorFiltro { get; set; } = string.Empty;
    public List<Provedores> ListaProvedores { get; set; } = new List<Provedores>();
    public List<Compras> ListaCompra { get; set; } = new List<Compras>();
    public List<Estados> ListaEstados { get; set; } = new List<Estados>();
    private bool mostrarModal = false;
    private int CompraIdSeleccionada { get; set; }
    private string DescripcionCompraSeleccionada { get; set; } = "";

    //NOTIFICACIONES
    public ToastType TipoNotificacion { get; set; }
    public string MensajeNotificacion { get; set; } = string.Empty;
    public string TituloNotificacion { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ListaProvedores = await provedoresService.Listar(C => true);
        ListaCompra = await compraService.Listar(C => true);
        ListaEstados = await estadoService.Listar(C => true);
    }

    private void MostrarModal(int compraId, string descripcion)
    {
        CompraIdSeleccionada = compraId;
        DescripcionCompraSeleccionada = descripcion;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        CompraIdSeleccionada = 0;
        DescripcionCompraSeleccionada = "";
    }

    private async Task Buscar()
    {
        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            if (valorFiltro == "id" && int.TryParse(searchBarValue, out int compraId))
            {
                ListaCompra = await compraService.Listar(s => s.CompraId == compraId);
            }
        }
        else
        {
            ListaCompra = await compraService.Listar(p => true);
        }
    }

    public async Task Eliminar()
    {
        try
        {
            await compraService.Eliminar(CompraIdSeleccionada);
            ListaCompra = await compraService.Listar(x => true);
            mostrarModal = false;
            CompraIdSeleccionada = 0;
            TipoNotificacion = ToastType.Success;
            TituloNotificacion = "Enhorabuena";
            MensajeNotificacion = "¡Se ha eliminado la compra exitosamente!";
            MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
        catch (Exception ex)
        {
            TipoNotificacion = ToastType.Danger;
            TituloNotificacion = "Error";
            MensajeNotificacion = "Hubo un error al eliminar la compra.";
            MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
        }
    }

    public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
        => toastService.Notify(new(tipo, titulo, cuerpo));

    public async Task Restablecer()
    {
        ListaCompra = await compraService.Listar(x => true);
        searchBarValue = string.Empty;
        valorFiltro = string.Empty;

        TipoNotificacion = ToastType.Info;
        TituloNotificacion = "Aviso";
        MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
        MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
    }
}
