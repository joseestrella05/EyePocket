@page "/Pago/Index"
@inject PagoService pagoService
@inject CXPService cxpService
@inject NavigationManager navigation
@inject ToastService toastService
@rendermode InteractiveServer
@inject MetodosPagoService metodoPagoservice

<PageTitle>Pagos</PageTitle>
<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">
		<div class="text-left">
			<h2 class="text-black"><i class="bi bi-person-badge m-1"></i> Pago</h2>
		</div>
	</div>
	<div class="col text-end">
		<a href="/Pago/Create" class="btn btn-secondary">Crear nuevo pago</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body" style="padding: 20px;">
			<div class="row">
				<div class="col-4">
					<div class="input-group" style="width: 250px">
						<div class="form-floating">
							<InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
								<option value="" selected disabled>--- Selecciona ---</option>
								<option value="id">CuentaId</option>
							</InputSelect>
							<label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
						</div>
						<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
					</div>
				</div>

				<div class="col">
					<div class="input-group" style="width: 500px">
						<div class="form-floating d-flex align-items-center">
							<InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
							<label for="floatingSearch">Buscar</label>
						</div>
						<button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
					</div>
				</div>
			</div>


			<div style="overflow-x: auto;">
				<table class="table table-light table-hover text-center">
					<thead class="table-striped">
						<tr>
							<th>Pago ID</th>
							<th>Cuenta por pagar ID</th>
							<th>Metodo Pago</th>
							<th>FechaPago</th>
							<th>Monto invertido</th>
							<th>Monto restante</th>
							<th>Acciones</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var pago in ListaPagos)
						{
							<tr>
								<td>@pago.PagoId</td>
								<td>@pago.CuentaPorPagarId</td>
								<td>@pago.MetodoPago.Descripcion</td>
								<td>@pago.FechaPago</td>
								<td>@pago.monto</td>
								<td>@pago.montoFaltante</td>
								<td class="d-flex justify-content-center gap-2">
									<a href="/Pago/Details/@pago.PagoId" class="btn btn-outline-dark bi-eye btn-md"></a>
									<a href="/Pago/Edit/@pago.PagoId" class="btn btn-outline-info bi bi-pencil-square btn-md"></a>
									<button type="button" @onclick="() => MostrarModal(pago.PagoId)" class="btn btn-outline-danger bi bi-trash btn-md"></button>
								</td>
							</tr>
						}
					</tbody>
					<caption>Cant. de Pagos: @CXPList.Count</caption>
				</table>
			</div>
		</div>
	</div>
</div>



@if (mostrarModal)
{
	<div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header" style="background-color: #7B0323; color: white;">
					<h5 class="modal-title">Eliminar Provedor</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>¿Está seguro de que desea eliminar a este Pago?</p>
					<p>Esta opción no se puede deshacer.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
					<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}


@code {
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public List<PagoCXP> ListaPagos { get; set; } = new List<PagoCXP>();
	public List<CXP> CXPList { get; set; } = new List<CXP>();
	public List<MetodosPago> ListaMetodoPago = new List<MetodosPago>();
	private bool mostrarModal = false;
	private int PagoIdSeleccionado { get; set; }
	private string EmailProvedoresSelecionado { get; set; } = "";

	//NOTIFICACIONES
	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ListaPagos = await pagoService.Listar(C => true) ?? new List<PagoCXP>();
		ListaMetodoPago = await metodoPagoservice.Listar(C => true) ?? new List<MetodosPago>();

	}

	private void MostrarModal(int pagoId)
	{
		PagoIdSeleccionado = pagoId;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		PagoIdSeleccionado = 0;
	}

	private async Task Buscar()
	{
		if (!string.IsNullOrWhiteSpace(valorFiltro) && !string.IsNullOrWhiteSpace(searchBarValue))
		{
			if (valorFiltro == "id" && int.TryParse(searchBarValue, out int pagoId))
			{
				ListaPagos = await pagoService.Listar(s => s.PagoId == pagoId);
			}
			else if (valorFiltro == "CuentaId" && int.TryParse(searchBarValue, out int cuentaId))
			{
				ListaPagos = await pagoService.Listar(s => s.CuentaPorPagarId == cuentaId);
			}
		}
		else
		{
			ListaPagos = await pagoService.Listar(p => true);
		}
	}

	public async Task Eliminar()
	{
		try
		{
			await pagoService.Eliminar(PagoIdSeleccionado);
			ListaPagos = await pagoService.Listar(x => true);
			mostrarModal = false;
			PagoIdSeleccionado = 0;
			TipoNotificacion = ToastType.Success;
			TituloNotificacion = "Enhorabuena";
			MensajeNotificacion = "¡Se ha eliminado el pago correctamente!";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
		catch (Exception e)
		{
			TipoNotificacion = ToastType.Danger;
			TituloNotificacion = "Error";
			MensajeNotificacion = "Hubo un error al eliminar el pago.";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
	}

	public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
	=> toastService.Notify(new(tipo, titulo, cuerpo));

	public async Task Restablecer()
	{
		ListaPagos = await pagoService.Listar(x => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;

		TipoNotificacion = ToastType.Info;
		TituloNotificacion = "Aviso";
		MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
		MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
	}
}
