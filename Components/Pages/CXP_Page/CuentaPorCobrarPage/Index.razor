@page "/CXPs/Index"
@inject CXPService cxpService
@inject EstadoCXPService estadoService
@inject MetodosPagoService metodoPagoService
@inject NavigationManager navigation
@inject ToastService toastService

<PageTitle>Provedores</PageTitle>
<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">
		<div class="text-left">
			<h2 class="text-black"><i class="bi bi-person-badge m-1"></i> Cuentas por cobrar</h2>
		</div>
	</div>
	<div class="col text-end">
		<a href="/CXPs/Create" class="btn btn-secondary">Crear nueva cuenta por cobrar</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body" style="padding: 20px;">
			<div class="row">
				<div class="col-4">
					<div class="input-group" style="width: 250px">
						<div class="form-floating">
							<InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
								<option value="" selected disabled>--- Selecciona ---</option>
								<option value="id">CuentaId</option>
							</InputSelect>
							<label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
						</div>
						<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
					</div>
				</div>

				<div class="col">
					<div class="input-group" style="width: 500px">
						<div class="form-floating d-flex align-items-center">
							<InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
							<label for="floatingSearch">Buscar</label>
						</div>
						<button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
					</div>
				</div>
			</div>

			<div style="overflow-x: auto;">
				<table class="table table-light table-hover" style="min-width: 100%;">
					<thead class="table table-striped">
						<tr class="text-center">
							<th>ID</th>
							<th>Saldo Pendiente</th>
							<th>Estado</th>
							<th>Ultimo Pago aportado</th>
							<th>Metodo Pago </th>
							<th>Acciones</th>
						</tr>
					</thead>

					<tbody>
						@foreach (var cxp in ListaCXP)
						{
							var estado = ListaEstados.FirstOrDefault(c => c.EstadoCXPId == cxp.EstadoCXPId);
							var metodoPago = ListaMetodoPago.FirstOrDefault(c => c.MetodoPagoId == cxp.MetodoPagoId);

							<tr class="text-center">
								<td>@cxp.CuentaId</td>
								<td>@(cxp.SaldoPendiente)</td>
								<td>@(estado?.descripcion)</td>
								<td>@(cxp.UltimoPago)</td>
								<td>@(metodoPago?.Descripcion)</td>
								<td class="text-center" style="display: flex; justify-content: center; gap: 5px;">
									<a href="/CXPs/Details/@cxp.CuentaId" class="btn btn-outline-dark bi-eye"></a>
									<a href="/CXPs/Edit/@cxp.CuentaId" class="btn btn-outline-info bi bi-pencil-square"></a>
									<button type="button" @onclick="() => MostrarModal(cxp.CuentaId, cxp.SaldoPendiente)" class="btn btn-outline-danger bi bi-trash"></button>
								</td>
							</tr>
						}
					</tbody>
					<caption>Cant. De Cuentas por cobrar: @ListaCXP.Count</caption>
				</table>
			</div>
		</div>
	</div>
</div>



@if (mostrarModal)
{
	<div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header" style="background-color: #7B0323; color: white;">
					<h5 class="modal-title">Eliminar Provedor</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>¿Está seguro de que desea eliminar a este Provedor?</p>
					<p>Esta opción no se puede deshacer.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
					<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}


@code {

	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public List<CXP> ListaCXP { get; set; } = new List<CXP>();
	public List<EstadoCXP> ListaEstados { get; set; } = new List<EstadoCXP>();
	public List<MetodosPago> ListaMetodoPago { get; set; } = new List<MetodosPago>();
	private bool mostrarModal = false;
	private int IdSeleccionado { get; set; }
	private string EmailProvedoresSelecionado { get; set; } = "";
	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		ListaCXP = await cxpService.Listar(C => true);
		ListaEstados = await estadoService.Listar(C => true);
		ListaMetodoPago = await metodoPagoService.Listar(MP => true);
	}

	private void MostrarModal(int cuentaId, decimal SaldoPendiente)
	{
		IdSeleccionado = cuentaId;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		IdSeleccionado = 0;
		EmailProvedoresSelecionado = "";
	}

	private async Task Buscar()
	{
		if (!string.IsNullOrWhiteSpace(valorFiltro) && valorFiltro == "id")
		{
			if (int.TryParse(searchBarValue, out int cuentaId))
			{
				// Filtrar por CuentaId
				ListaCXP = await cxpService.Listar(c => c.CuentaId == cuentaId);
			}
			else
			{
				TipoNotificacion = ToastType.Warning;
				TituloNotificacion = "Advertencia";
				MensajeNotificacion = "Por favor ingrese un ID válido.";
				MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
			}
		}
		else
		{
			// Mostrar todas las cuentas
			ListaCXP = await cxpService.Listar(c => true);
		}
	}

	public async Task Eliminar()
	{
		try
		{
			await cxpService.Eliminar(IdSeleccionado);
			ListaCXP = await cxpService.Listar(x => true);  // ACTUALIZA ListaCXP
			mostrarModal = false;
			IdSeleccionado = 0;
			TipoNotificacion = ToastType.Success;
			TituloNotificacion = "Enhorabuena";
			MensajeNotificacion = "¡Se ha eliminado exitosamente!";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
		catch (Exception ex)
		{
			TipoNotificacion = ToastType.Danger;
			TituloNotificacion = "Error";
			MensajeNotificacion = "Hubo un error al eliminar la cuenta.";
			MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
	}

	public void MostrarToast(ToastType tipo, string titulo, string cuerpo)
		=> toastService.Notify(new(tipo, titulo, cuerpo));

	public async Task Restablecer()
	{
		ListaCXP = await cxpService.Listar(x => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;

		TipoNotificacion = ToastType.Info;
		TituloNotificacion = "Aviso";
		MensajeNotificacion = "Se han restablecido los criterios de búsqueda.";
		MostrarToast(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
	}

}
