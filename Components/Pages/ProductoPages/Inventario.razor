@page "/Productos/Inventario"
@inject InventarioService inventarioService
@inject ProductosService productosService
@inject MermasService mermasService
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Inventario</PageTitle>

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirmación</h5>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar el inventario con ID: @InventarioIdSeleccionado?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarInventario">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

<div class="container-fluid p-3">
    <div class="row mb-3">
        <div class="col">
            <h2 class="text-black"><i class="bi bi-clipboard m-1"></i> Inventario</h2>
        </div>
        <div class="col text-end">
            <a href="/Inventario/Entrada" class="btn btn-secondary">Entrada</a>
            <a href="/Inventario/Salida" class="btn btn-primary">Salida</a>
            <a href="/Mermas/Index" class="btn btn-info">Historial Mermas</a>
        </div>
    </div>

    <div class="card shadow-lg w-100">
        <div class="card-body">
            <div class="table-responsive overflow-x-auto">
                <table class="table table-light table-hover w-100">
                    <thead class="table table-striped text-center">
                        <tr>
                            <th>Código</th>
                            <th>Producto</th>
                            <th>Stock</th>
                            <th>Mermas</th> <!-- Nueva columna -->
                            <th>Stock Disponible</th> <!-- Nueva columna -->
                            <th>Entradas</th>
                            <th>Salidas</th>
                            <th>Precio</th>
                            <th>Importe Inventario</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var inventario in ListaInventario)
                        {
                            var totalMermas = MermasPorProducto.TryGetValue(inventario.ProductoId, out var mermas) ? mermas : 0;
                            var stockDisponible = inventario.Stock - totalMermas;
                            var importeInventario = stockDisponible * inventario.Producto.Precio;

                            <tr class="text-center">
                                <td>@inventario.Producto.Codigo</td>
                                <td>@inventario.Producto.Nombre</td>
                                <td>@inventario.Stock</td>
                                <td>@totalMermas</td> <!-- Nueva columna -->
                                <td>@stockDisponible</td> <!-- Nueva columna -->
                                <td>@inventario.Entradas</td>
                                <td>@inventario.Salidas</td>
                                <td>@inventario.Producto.Precio.ToString("C2")</td>
                                <td>@importeInventario.ToString("C2")</td>
                                <td>
                                    <button type="button" @onclick="() => MostrarModal(inventario.InventarioId)" class="btn btn-outline-danger bi bi-trash"></button>
                                    <button type="button" @onclick="() => AgregarEntrada(inventario.InventarioId)" class="btn btn-outline-success bi bi-plus-circle"></button>
                                    <button type="button" @onclick="() => RegistrarSalida(inventario.InventarioId)" class="btn btn-outline-warning bi bi-dash-circle"></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                    <caption>Total Inventario: @ListaInventario.Count</caption>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    public List<Inventarios> ListaInventario { get; set; } = new();
    private Dictionary<int, int> MermasPorProducto { get; set; } = new(); // Nueva estructura
    private bool mostrarModal = false;
    private int InventarioIdSeleccionado { get; set; }

    private void MostrarModal(int inventarioId)
    {
        InventarioIdSeleccionado = inventarioId;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        InventarioIdSeleccionado = 0;
    }

    private async Task EliminarInventario()
    {
        if (InventarioIdSeleccionado > 0)
        {
            await inventarioService.Eliminar(InventarioIdSeleccionado);
            await CargarInventario();
            CerrarModal();
            toastService.Notify(new(ToastType.Success, "Éxito", "Inventario eliminado correctamente"));
        }
    }

    private async Task AgregarEntrada(int inventarioId)
    {
        var exito = await inventarioService.RegistrarEntrada(inventarioId, 1);
        if (exito)
        {
            await CargarInventario();
            toastService.Notify(new(ToastType.Success, "Éxito", "Entrada registrada correctamente"));
        }
        else
        {
            toastService.Notify(new(ToastType.Warning, "Error", "Hubo un problema al registrar la entrada"));
        }
    }

    private async Task RegistrarSalida(int inventarioId)
    {
        var exito = await inventarioService.RegistrarSalida(inventarioId, 1);
        if (exito)
        {
            await CargarInventario();
            toastService.Notify(new(ToastType.Success, "Éxito", "Salida registrada correctamente"));
        }
        else
        {
            toastService.Notify(new(ToastType.Warning, "Error", "No hay suficiente stock"));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarInventario();
    }

    private async Task CargarInventario()
    {
        ListaInventario = await inventarioService.Listar(i => true);
        var listaMermas = await mermasService.Listar(m => true);

        // Calcular mermas por producto asegurando que no se exceda el stock
        MermasPorProducto = listaMermas
            .GroupBy(m => m.ProductoId)
            .ToDictionary(g => g.Key, g =>
            {
                var stockDisponible = ListaInventario.FirstOrDefault(i => i.ProductoId == g.Key)?.Stock ?? 0;
                var totalMermas = g.Sum(m => m.Cantidad);

                // Evitar que las mermas superen el stock disponible
                return Math.Min(totalMermas, stockDisponible);
            });

        StateHasChanged(); // Actualizar UI
    }

}
