@page "/Inventario/Salida"
@inject InventarioService inventarioService
@inject ProductosService productosService
@inject ToastService toastService
@inject NavigationManager Navigation

<PageTitle>Registrar Salida</PageTitle>

<h3>Registrar Salida de Producto</h3>

<div class="container">
    <div class="card">
        <div class="card-body">

            <!-- Buscar Producto por Código o Nombre -->
            <div class="mb-3">
                <label class="form-label">Buscar Producto (Código o Nombre)</label>
                <input type="text" class="form-control" @bind="Busqueda" @oninput="FiltrarProductos" placeholder="Escriba el código o nombre del producto..." />

                @if (ProductosFiltrados.Any())
                {
                    <ul class="list-group mt-2" style="max-height: 200px; overflow-y: auto;">
                        @foreach (var producto in ProductosFiltrados)
                        {
                            <li class="list-group-item" @onclick="() => SeleccionarProducto(producto)">
                                @producto.Codigo - @producto.Nombre
                            </li>
                        }
                    </ul>
                }
            </div>

            <!-- Campo para mostrar la cantidad actual en inventario (SOLO LECTURA) -->
            <div class="mb-3">
                <label class="form-label">Cantidad en Inventario</label>
                <input type="number" class="form-control" value="@CantidadEnInventario" readonly />
            </div>

            <!-- Cantidad con botones de incremento/decremento -->
            <div class="mb-3">
                <label class="form-label">Cantidad a Retirar</label>
                <div class="input-group">
                    <button class="btn btn-outline-secondary" @onclick="() => ModificarCantidad(-1)">-1</button>
                    <button class="btn btn-outline-secondary" @onclick="() => ModificarCantidad(-10)">-10</button>
                    <button class="btn btn-outline-secondary" @onclick="() => ModificarCantidad(-60)">-60</button>

                    <input type="number" class="form-control" value="@Cantidad" readonly />

                    <button class="btn btn-outline-secondary" @onclick="() => ModificarCantidad(1)">+1</button>
                    <button class="btn btn-outline-secondary" @onclick="() => ModificarCantidad(10)">+10</button>
                    <button class="btn btn-outline-secondary" @onclick="() => ModificarCantidad(60)">+60</button>
                </div>
            </div>

            <div class="mb-3">
                <label class="form-label">Fecha</label>
                <input type="date" class="form-control" @bind="FechaSalida" />
            </div>

            <button class="btn btn-danger" @onclick="RegistrarSalida">Registrar Salida</button>
            <button class="btn btn-secondary" @onclick="LimpiarFormulario">Limpiar</button>
            <button class="btn btn-warning" @onclick="VolverAInventarios">Volver a Inventarios</button>
        </div>
    </div>
</div>

@code {
    private int ProductoId { get; set; }
    private string Busqueda { get; set; } = "";
    private int Cantidad { get; set; } = 1;
    private int CantidadEnInventario { get; set; } = 0;
    private DateTime FechaSalida { get; set; } = DateTime.Today;

    private List<Productos> productos = new();
    private List<Productos> ProductosFiltrados = new();
    private Productos ProductoSeleccionado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        productos = await productosService.Listar(a => true);
    }

    private void FiltrarProductos(ChangeEventArgs e)
    {
        Busqueda = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(Busqueda))
        {
            ProductosFiltrados = productos
                .Where(p => p.Codigo.Contains(Busqueda, StringComparison.OrdinalIgnoreCase) ||
                            p.Nombre.Contains(Busqueda, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            ProductosFiltrados.Clear();
        }
    }

    private async void SeleccionarProducto(Productos producto)
    {
        ProductoSeleccionado = producto;
        ProductoId = producto.ProductoId;
        Busqueda = producto.Nombre;

        var inventarios = await inventarioService.Listar(i => i.ProductoId == ProductoId);
        if (inventarios.Any())
        {
            CantidadEnInventario = inventarios.First().Stock;
        }
        else
        {
            CantidadEnInventario = 0;
        }

        Cantidad = 1;
        ProductosFiltrados.Clear();
    }

    private void ModificarCantidad(int cantidad)
    {
        Cantidad = Math.Max(1, Cantidad + cantidad);
    }

    private async Task RegistrarSalida()
    {
        if (ProductoId > 0 && Cantidad > 0)
        {
            var inventario = await inventarioService.Listar(i => i.ProductoId == ProductoId);
            if (inventario.Any())
            {
                var inv = inventario.First();
                if (inv.Stock < Cantidad)
                {
                    toastService.Notify(new ToastMessage(ToastType.Warning, "Error", "Stock insuficiente para la salida"));
                    return;
                }

                inv.Salidas += Cantidad;
                inv.Stock -= Cantidad;
                bool resultado = await inventarioService.Modificar(inv);
                if (resultado)
                {
                    toastService.Notify(new ToastMessage(ToastType.Success, "Éxito", "Salida registrada correctamente"));
                }
                else
                {
                    toastService.Notify(new ToastMessage(ToastType.Warning, "Error", "No se pudo registrar la salida"));
                }
            }
            else
            {
                toastService.Notify(new ToastMessage(ToastType.Warning, "Error", "El producto no tiene inventario registrado"));
            }
            LimpiarFormulario();
        }
        else
        {
            toastService.Notify(new ToastMessage(ToastType.Warning, "Error", "Por favor, seleccione un producto y una cantidad válida"));
        }
    }

    private void LimpiarFormulario()
    {
        ProductoId = 0;
        Busqueda = "";
        Cantidad = 1;
        CantidadEnInventario = 0;
        FechaSalida = DateTime.Today;
        ProductosFiltrados.Clear();
    }

    private void VolverAInventarios()
    {
        Navigation.NavigateTo("/Productos/Inventario");
    }
}