@page "/Productos/Index"
@inject ProductosService productoService
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Productos</PageTitle>

@if (mostrarModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Confirmación</h5>
                    @* <button type="button" class="close" @onclick="CerrarModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button> *@
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas eliminar el producto con ID: @ProductoIdSeleccionado?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="EliminarProducto">Eliminar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

<div class="row" style="background-color:white; padding:10px; margin:10px;">
    <div class="col">
        <div class="text-left">
            <h2 class="text-black"><i class="bi bi-box m-1"></i> Productos</h2>
        </div>
    </div>
    <div class="col">
        <a href="/Productos/Create" class="btn btn-secondary">Crear nuevo producto</a>
    </div>
</div>

<div class="container">
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-4">
                    <div class="input-group" style="width: 250px">
                        <div class="form-floating">
                            <InputSelect class="form-select" id="floatingSelect" aria-label="Floating label select example" @bind-Value="@valorFiltro">
                                <option value="" selected disabled>--- Selecciona ---</option>
                                <option value="idproducto">ID Producto</option>
                                <option value="codigo">Código</option>
                                <option value="nombre">Nombre</option>
                                <option value="fechaingreso">Fecha de Ingreso</option>
                            </InputSelect>
                            <label for="floatingSelect"><strong>Filtrar en base a...</strong></label>
                        </div>
                        <button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="() => Restablecer()"></button>
                    </div>
                </div>
                <div class="col">
                    <div class="input-group" style="width: 500px">
                        <div class="form-floating d-flex align-items-center">
                            <InputText @bind-Value="@searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
                            <label for="floatingSearch">Buscar</label>
                        </div>
                        <button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
                    </div>
                </div>
            </div>

            @if (valorFiltro == "fechaingreso")
            {
                <br />
                <div class="row">
                    <div class="col">
                        <div class="form-floating">
                            <InputDate id="desde" class="form-control" @bind-Value=Desde></InputDate>
                            <label for="desde"><strong>Fecha Inicial</strong></label>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-floating">
                            <InputDate id="hasta" class="form-control" @bind-Value=Hasta></InputDate>
                            <label for="hasta"><strong>Fecha Final</strong></label>
                        </div>
                    </div>
                </div>
            }
            <br />
            <table class="table table-light table-hover">
                <thead class="table table-striped">
                    <tr class="text-center">
                        <th>ID</th>
                        <th>Código</th>
                        <th>Producto</th>
                        <th>Proveedor</th>
                        <th>Precio</th>
                        <th>Costo</th>
                        <th>Fecha ingreso</th>
                        <th>Categoria</th>
                        <th>Descripcion</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var producto in ListaProductos)
                    {
                        <tr class="text-center text-white">
                            <td>@producto.ProductoId</td>
                            <td>@producto.Codigo</td>
                            <td>@producto.Nombre</td>
                            <td>@producto.Proveedor</td>
                            <td>@producto.Precio.ToString("C")</td>
                            <td>@producto.Costo.ToString("C")</td>
                            <td>@producto.FechaIngreso.ToString("dd/M/yyyy")</td>
                            <td>@producto.Categoria</td>
                            <td>@producto.Descripcion</td>
                            <td class="text-center">
                                <a href="/Productos/Edit/@producto.ProductoId" class="btn btn-outline-info bi bi-pencil-square"></a>
                                <button type="button" @onclick="() => MostrarModal(producto.ProductoId)" class="btn btn-outline-danger bi bi-trash"></button>
                            </td>
                        </tr>
                    }
                </tbody>
                <caption>Total Productos: @ListaProductos.Count</caption>
            </table>
        </div>
    </div>
</div>

@code {
    public string searchBarValue { get; set; } = string.Empty;
    public string valorFiltro { get; set; } = string.Empty;
    public DateTime? Desde { get; set; } = null;
    public DateTime? Hasta { get; set; } = null;
    public List<Productos> ListaProductos { get; set; } = new List<Productos>();

    private bool mostrarModal = false;
    private int ProductoIdSeleccionado { get; set; }

    private void MostrarModal(int productoId)
    {
        ProductoIdSeleccionado = productoId;
        mostrarModal = true;
    }

    private void CerrarModal()
    {
        mostrarModal = false;
        ProductoIdSeleccionado = 0;
    }

    private async Task EliminarProducto()
    {
        if (ProductoIdSeleccionado > 0)
        {
            await productoService.Eliminar(ProductoIdSeleccionado);
            ListaProductos = await productoService.Listar(p => true);
            CerrarModal();
            toastService.Notify(new(ToastType.Success, "Éxito", "Producto eliminado correctamente"));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        ListaProductos = await productoService.Listar(p => true);
    }

    public async Task Buscar()
    {
        if (string.IsNullOrEmpty(valorFiltro))
        {
            toastService.Notify(new(ToastType.Warning, "Aviso", "Debe seleccionar una opción en el filtro."));
            return;
        }

        switch (valorFiltro)
        {
            case "idproducto":
                if (int.TryParse(searchBarValue, out int id))
                    ListaProductos = await productoService.Listar(p => p.ProductoId == id);
                break;
            case "codigo":
                ListaProductos = await productoService.Listar(p => p.Codigo.Contains(searchBarValue));
                break;
            case "nombre":
                ListaProductos = await productoService.Listar(p => p.Nombre.Contains(searchBarValue));
                break;
            case "fechaingreso":
                if (Desde != null && Hasta != null)
                    ListaProductos = await productoService.Listar(p => p.FechaIngreso >= Desde && p.FechaIngreso <= Hasta);
                break;
            default:
                ListaProductos = await productoService.Listar(p => true);
                break;
        }
    }

    public async Task Restablecer()
    {
        ListaProductos = await productoService.Listar(p => true);
        searchBarValue = string.Empty;
        valorFiltro = string.Empty;
        Desde = null;
        Hasta = null;
    }
}
