@page "/Ventas/Estadisticas"
@inject ProductosService productoService
@inject OrdenVentasDetalleService ordenVentaDetalleService
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Estadisticas</PageTitle>

<div class="container-fluid p-3">
    <div class="card shadow-lg w-100" style="min-height: 70vh;">
        <div class="card-body">
            <div class="row mb-3">
                <div class="col">
                    <h2 class="text-black"><i class="bi bi-box m-1"></i> Estadisticas</h2>
                </div>
            </div>

            <div class="row mb-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <div class="form-floating">
                            <InputSelect class="form-select" id="floatingSelect" @bind-Value="@valorFiltro">
                                <option value="" selected disabled>--- Selecciona ---</option>
                                <option value="idproducto">ID Producto</option>
                                <option value="codigo">Código</option>
                                <option value="nombre">Nombre</option>
                                <option value="mayorganancia">Mayor Ganancia</option>
                                <option value="mayorunidad">Mayor Unidades Vendidas</option>

                            </InputSelect>
                            <label for="floatingSelect"><strong>Buscar por:</strong></label>
                        </div>
                        <button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="input-group">
                        <div class="form-floating flex-grow-1">
                            <InputText @bind-Value="@searchBarValue" class="form-control" id="floatingSearch" />
                            <label for="floatingSearch">Buscar</label>
                        </div>
                        <button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
                    </div>
                </div>
            </div>

            <div class="table-responsive overflow-x-auto">
                <table class="table table-light table-hover w-100">
                    <thead class="table table-striped">
                        <tr class="text-center">
                            <th>#</th>
                            <th>Código</th>
                            <th>Producto</th>
                            <th>Unidades Vendidas</th>
                            <th>Ganancias de ventas</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var producto in ListaProductosConEstadisticas)
                        {
                            <tr class="text-center">
                                <td>@producto.Producto.ProductoId</td>
                                <td>@producto.Producto.Codigo</td>
                                <td>@producto.Producto.Nombre</td>
                                <td>@producto.UnidadesVendidas</td>
                                <td>@producto.Ganancias.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                    <caption>Total Productos: @ListaProductosConEstadisticas.Count</caption>
                </table>
            </div>
        </div>
    </div>
</div>

@code {
    public string searchBarValue { get; set; } = string.Empty;
    public string valorFiltro { get; set; } = string.Empty;

    public List<ProductoConEstadisticas> ListaProductosConEstadisticas { get; set; } = new();

    private List<Productos> TodosLosProductos { get; set; } = new();
    private List<OrdenVentaDetalle> TodosLosDetalles { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        TodosLosProductos = await productoService.Listar(p => true);
        TodosLosDetalles = await ordenVentaDetalleService.Listar(p => true);

        CalcularEstadisticas();
    }

    private void CalcularEstadisticas()
    {
        ListaProductosConEstadisticas = TodosLosProductos.Select(producto =>
        {
            var detallesProducto = TodosLosDetalles.Where(d => d.ProductoId == producto.ProductoId);

            int unidadesVendidas = detallesProducto.Sum(d => d.Cantidad);
            decimal ganancias = unidadesVendidas * producto.Precio;

            return new ProductoConEstadisticas
                {
                    Producto = producto,
                    UnidadesVendidas = unidadesVendidas,
                    Ganancias = ganancias
                };
        }).ToList();
    }

    public async Task Buscar()
    {
        if (string.IsNullOrEmpty(valorFiltro))
        {
            toastService.Notify(new(ToastType.Warning, "Aviso", "Debe seleccionar una opción en el filtro."));
            return;
        }

        IEnumerable<ProductoConEstadisticas> productosFiltrados = ListaProductosConEstadisticas;

        switch (valorFiltro)
        {
            case "idproducto":
                if (int.TryParse(searchBarValue, out int id))
                    productosFiltrados = ListaProductosConEstadisticas.Where(p => p.Producto.ProductoId == id);
                break;
            case "codigo":
                productosFiltrados = ListaProductosConEstadisticas.Where(p => p.Producto.Codigo.Contains(searchBarValue, StringComparison.OrdinalIgnoreCase));
                break;
            case "nombre":
                productosFiltrados = ListaProductosConEstadisticas.Where(p => p.Producto.Nombre.Contains(searchBarValue, StringComparison.OrdinalIgnoreCase));
                break;
            case "mayorganancia":
                productosFiltrados = ListaProductosConEstadisticas
                    .OrderByDescending(p => p.Ganancias);
                break;
            case "mayorunidad":
                productosFiltrados = ListaProductosConEstadisticas
                    .OrderByDescending(p => p.UnidadesVendidas);
                break;
        }

        ListaProductosConEstadisticas = productosFiltrados.ToList();
    }


    public async Task Restablecer()
    {
        await OnInitializedAsync(); // Reinicia todo
        searchBarValue = string.Empty;
        valorFiltro = string.Empty;
    }

    public class ProductoConEstadisticas
    {
        public Productos Producto { get; set; } = new();
        public int UnidadesVendidas { get; set; }
        public decimal Ganancias { get; set; }
    }
}
