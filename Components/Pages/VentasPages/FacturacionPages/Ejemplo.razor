@page "/Ventas/Facturacion/Edit"
@inject ProductosService productoService
@inject ToastService toastService
@inject NavigationManager NavigationManager

<PageTitle>Facturación</PageTitle>

<EditForm Model="ListaFacturas" class="border shadow-lg p-3 rounded">
    <div class="container mt-4">
        <div class="row justify-content-center">
            <div class="col-md-auto">
                <div class="card border-0 rounded-3">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-3 text-center text-md-end mb-3 mb-md-0">
                                <label class="d-inline-block fs-4 fw-bold text-black">Nombre del producto</label>
                            </div>

                            <div class="col-md-6 d-flex align-items-center mb-3 mb-md-0">
                                <div class="input-group input-group-lg flex-grow-1 me-3">
                                    <input @bind="valorFiltro" class="form-control" placeholder="Buscar" />
                                </div>

                                <div class="d-flex align-items-center">
                                    <label for="Cantidad" class="form-label fw-bold me-2 mb-0">Cantidad:</label>
                                    <input type="text" id="Cantidad" class="form-control me-3" style="width: 100px;" @bind="cantidad" />
                                </div>

                                <button type="button" class="btn btn-outline-secondary d-flex align-items-center gap-2" @onclick="Restablecer">
                                    <i class="bi bi-arrow-counterclockwise"></i>
                                </button>
                            </div>

                            <div class="col-md-3 d-flex justify-content-end rounded-pill">
                                <button @onclick="Añadir" class="btn btn-success rounded-pill" type="button" style="background-color: #004b55; border-color: #004b55;">
                                    <span class="bi bi-plus"></span> Añadir
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div style="max-height: 400px; overflow-y: auto;">
        <table class="table table-striped table-hover table-bordered text-center align-middle">
            <thead class="bg-dark text-black">
                <tr>
                    <th>#</th>
                    <th>Código</th>
                    <th>Descripción</th>
                    <th>Cantidad</th>
                    <th>Precio</th>
                    <th>Subtotal</th>
                    <th>Editar</th>
                    <th>Eliminar</th>
                </tr>
            </thead>
            <tbody class="text-white">
                @for (int i = 0; i < ListaFacturas.Count; i++)
                {
                    var factura = ListaFacturas[i];
                    <tr>
                        <td class="text-black">@(i + 1)</td>
                        <td class="text-black">@factura.Productos?.Codigo</td>
                        <td class="text-black">@factura.Productos?.Nombre</td>
                        <td class="text-black">@factura.Cantidad</td>
                        <td class="text-black">@factura.Productos?.Precio</td>
                        <td class="text-black">@factura.Subtotal</td>
                        <td>
                            <a href="/Ventas/Facturacion/Edit/@factura.OrdenVenta?.OrdenVentaId" class="btn btn-info btn-sm">
                                <i class="bi bi-eye"></i>
                            </a>
                        </td>
                        <td>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminacion(factura.Productos?.Codigo)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <button class="btn btn-danger d-flex align-items-center px-3 py-2 rounded-pill" @onclick="MostrarModalCobro">
            <i class="bi bi-cash me-2"></i> Cobrar
        </button>

        <div class="p-3 rounded-3 shadow" style="background-color: #004b55; color: white; min-width: 200px;">
            <h4 class="m-0 text-start" style="font-size: 1.5rem;">Total $@ListaFacturas.Sum(f => f.Subtotal)</h4>
            <p class="m-0 text-start" style="font-size: 1rem;">SubTotal $@ListaFacturas.Sum(f => f.Subtotal)</p>
        </div>
    </div>

    <div class="card-footer text-start">
        <p>Total de Productos: @ListaFacturas.Count</p>
    </div>
</EditForm>



@code {
    [Parameter] public int OrdenVentaId { get; set; }
    public List<OrdenVentaDetalle> ListaFacturas { get; set; } = new();
    private string valorFiltro = "";
    private int cantidad;
    private double Efectivo { get; set; } = 0.00;
    private double Total => ListaFacturas.Sum(f => f.Subtotal);
    private double Cambio => Efectivo > 0 ? Math.Max(Efectivo - Total, 0) : 0.00;
    private bool mostrarModalFactura = false;


    private bool mostrarModalConfirmacion = false;
    private bool mostrarModalCobro = false;
    private bool mostrarModalPagoTarjeta = false;
    private bool mostrarModalPagoaCredito = false;
    private bool mostrarModalPagoEfectivo = false;
    private string? codigoProductoAEliminar;

    private void MostrarModalFactura() => mostrarModalFactura = true;
    private void CerrarModalFactura() => mostrarModalFactura = false;

    private void MostrarModalCobro() => mostrarModalCobro = true;
    private void CerrarModalCobro() => mostrarModalCobro = false;


    private void MostrarModalPagoaCredito()
    {
        mostrarModalCobro = false;
        mostrarModalPagoaCredito = true;
    }


    private void CerrarModalPagoaCredito()
    {
        mostrarModalCobro = true;
        mostrarModalPagoaCredito = false;
    }

    private void MostrarModalPagoTarjeta()
    {
        mostrarModalCobro = false;
        mostrarModalPagoTarjeta = true;
    }

    private void CerrarModalPagoTarjeta()
    {
        mostrarModalCobro = true;
        mostrarModalPagoTarjeta = false;
    }

    private void MostrarModalPagoEfectivo()
    {
        mostrarModalCobro = false;
        mostrarModalPagoEfectivo = true;
    }

    private async Task ConfirmarPagoEfectivo()
    {
        MostrarToast(ToastType.Success, "Éxito", "Los datos se guardaron con éxito");
        await Task.Delay(2000);
        NavigationManager.NavigateTo("/Ventas/Facturacion/Index", true);
    }


    private void CerrarModalPagoEfectivo()
    {
        mostrarModalCobro = true;
        mostrarModalPagoEfectivo = false;
    }


    private async Task Restablecer()
    {
        valorFiltro = "";
        cantidad = 0;
    }

    private async Task Añadir()
    {
        if (cantidad < 1)
        {
            MostrarToast(ToastType.Warning, "Atención", "La cantidad debe ser mayor o igual a 1");
            return;
        }

        if (!string.IsNullOrWhiteSpace(valorFiltro))
        {
            var producto = await productoService.BuscarNombre(valorFiltro);
            if (producto != null)
            {
                ListaFacturas.Add(new OrdenVentaDetalle
                    {
                        OrdenVentaId = OrdenVentaId,
                        ProductoId = producto.ProductoId,
                        Productos = producto,
                        Cantidad = cantidad,
                        Subtotal = (double)(producto.Precio * cantidad)
                    });
            }
            else
            {
                MostrarToast(ToastType.Danger, "Error", "Producto no encontrado");
            }
        }
        else
        {
            MostrarToast(ToastType.Warning, "Atención", "Ingrese un nombre de producto");
        }
    }

    private void ConfirmarEliminacion(string? codigoProducto)
    {
        codigoProductoAEliminar = codigoProducto;
        mostrarModalConfirmacion = true;
    }

    private void EliminarConfirmado()
    {
        if (!string.IsNullOrWhiteSpace(codigoProductoAEliminar))
        {
            var productoAEliminar = ListaFacturas.FirstOrDefault(f => f.Productos?.Codigo == codigoProductoAEliminar);

            if (productoAEliminar != null)
            {
                ListaFacturas.Remove(productoAEliminar);
                MostrarToast(ToastType.Success, "Eliminado", "Producto eliminado correctamente");
            }
            else
            {
                MostrarToast(ToastType.Danger, "Error", "Producto no encontrado");
            }
        }
        else
        {
            MostrarToast(ToastType.Danger, "Error", "Código de producto inválido");
        }

        mostrarModalConfirmacion = false;
        codigoProductoAEliminar = null;
    }

    private void CancelarEliminacion()
    {
        mostrarModalConfirmacion = false;
        codigoProductoAEliminar = null;
    }

    private void CalcularCambio(ChangeEventArgs e)
    {
        double.TryParse(e.Value?.ToString(), out double efectivo);
        Efectivo = efectivo;
    }

    private void Cobrar()
    {
        MostrarToast(ToastType.Success, "Cobro Exitoso", "La transacción se ha realizado correctamente.");
        CerrarModalCobro();
    }

    public void MostrarToast(ToastType tipo, string titulo, string cuerpo) =>
        toastService.Notify(new(tipo, titulo, cuerpo));
}

