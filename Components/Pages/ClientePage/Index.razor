@page "/Cliente/Index"
@using Microsoft.AspNetCore.Identity
@inject ClienteServices clientesService

@rendermode InteractiveServer

<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">

		<div class="text-left" >
	<h2 class="text-black" ><i class="bi bi-person-plus m-1"></i> Clientes</h2>
     </div>
	</div>
	<div class="col" style="">
		<a href="/Cliente/Create" class="btn btn-secondary">Crear nuevo cliente</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body">
			<div class="row">
				<div class="col">
					<label>Filtrar por:</label>
					<InputText class="form-control" @bind-Value="Filtro" placeholder="Nombre del cliente"></InputText>
				</div>
				<div class="col">
					<label>Fecha de creacion:</label>
					<InputDate class="form-control" @bind-Value="FechaI" placeholder="Nombre del cliente"></InputDate>
				</div>
				<div class="col">
					<label>Fecha de creacion:</label>
					<InputDate class="form-control" @bind-Value="FechaF" placeholder="Nombre del cliente"></InputDate>
				</div>
			</div>

			<table class="table table-light table-hover">
				<thead class="table table-striped ">
					<tr class="text-center ">
						<th>Id</th>
						<th>Nombre</th>
						<th>Cedula</th>
						<th>Contacto</th>
						<th>Email</th>
						<th>Direccion</th>
						<th>Fecha registro</th>
						<th>Acciones</th>

					</tr>
				</thead>
				<tbody>
					@foreach (var cliente in ListaClientes)
					{
						<tr class="text-center text-white">
							@*Id*@
							<th>@cliente.ClienteId</th>
							@*Nombre*@
							<th>@cliente.Nombre</th>
							@*Concepto*@
							<th>@cliente.Cedula</th>
							@*Deuda*@
							<th>@( $"({cliente.Telefono?[..3]}) {cliente.Telefono?[3..6]}-{cliente.Telefono?[6..]}")</th>
							<th>@cliente.Email</th>
							<th>@cliente.Direccion</th>
							<th>@cliente.FechaIngreso.ToString("yyyy/M/dd")</th>

							@*Botones*@
							<td class="text-center">
								<a href="/Cliente/Details/@cliente.ClienteId" class="btn btn-outline-dark bi-eye"></a>

								<a href="/Cliente/Edit/@cliente.ClienteId"  class="btn btn-outline-info bi bi-pencil-square"></a>

								<button type="button" @onclick="() => MostrarModal(cliente.ClienteId, cliente.Email)" class="btn btn-outline-danger bi bi-trash"></button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
</div>

@if (mostrarModal)
{
	<div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header" style="background-color: #7B0323; color: white;">
					<h5 class="modal-title">Eliminar Cliente</h5>
					<button type="button" class="btn-close" @onclick="CerrarModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>¿Está seguro de que desea eliminar a este cliente?</p>
					<p>Esta opción no se puede deshacer.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
					<button type="button" class="btn btn-danger" @onclick="Eliminar">Eliminar</button>
				</div>
			</div>
		</div>
	</div>
	<div class="modal-backdrop fade show" @onclick="CerrarModal"></div>
}

<style>
	body {
	background-color: #f5f5f5;
	}

	.btn-success {
		background-color: #0d5c63;
		border: none;
	}
</style>
@code {
	public string Filtro { get; set; } = String.Empty;
	public DateTime FechaI { get; set; } = DateTime.Now;
	public DateTime FechaF { get; set; } = DateTime.Now;
	public List<Clientes> ListaClientes { get; set; } = new List<Clientes>();

	protected override async Task OnInitializedAsync()
	{
		ListaClientes = await clientesService.Listar(C => true);
	}

	// MODALS
	private bool mostrarModal = false;
	private int ClienteIdSeleccionado { get; set; }
	private string EmailClienteSelecionado { get; set; } = "";

	private void MostrarModal(int clienteId, string clienteEmail)
	{
		ClienteIdSeleccionado = clienteId;
		EmailClienteSelecionado = clienteEmail;
		mostrarModal = true;
	}

	private void CerrarModal()
	{
		mostrarModal = false;
		ClienteIdSeleccionado = 0;
		EmailClienteSelecionado = "";
	}

	public async Task Eliminar()
	{
		try
		{
			// OJO: cuando sea necesario se descomentara este codigo
			//
			// var user = await UserManager.FindByEmailAsync(EmailClienteSelecionado);
			// if (user == null)
			// 	return;
			// await UserManager.DeleteAsync(user);

			await clientesService.Eliminar(ClienteIdSeleccionado);
			ListaClientes = await clientesService.Listar(x => true);
			mostrarModal = false;
			ClienteIdSeleccionado = 0;
			TipoNotificacion = ToastType.Success;
			TituloNotificacion = "Enhorabuena";
			MensajeNotificacion = "¡Se ha eliminado el cliente exitosamente!";
			ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
		catch (Exception ex)
		{
			TipoNotificacion = ToastType.Danger;
			TituloNotificacion = "Error";
			MensajeNotificacion = "Hubo un error al eliminar el cliente.";
			ShowMessage(TipoNotificacion, TituloNotificacion, MensajeNotificacion);
		}
	}

	//NOTIFICACIONES
	public List<ToastMessage> Notificacion = new List<ToastMessage>();
	public ToastType TipoNotificacion { get; set; }
	public string MensajeNotificacion { get; set; } = string.Empty;
	public string TituloNotificacion { get; set; } = string.Empty;

	public void ShowMessage(ToastType toastType, string titulo, string cuerpo) => Notificacion.Add(CreateToastMessage(toastType, titulo, cuerpo));
	private ToastMessage CreateToastMessage(ToastType toastType, string titulo, string cuerpo)
	=> new ToastMessage
		{
			Type = toastType,
			Title = $"{titulo}",
			AutoHide = true,
			HelpText = $"{DateTime.Now}",
			Message = $"{cuerpo}",
		};

}
