@page "/Cuentas-Por-Cobrar/Create"
@rendermode InteractiveServer
@inject OrdenVentaService OrdenVentaServices
@inject CuentasXCobrarService DeudaServices
@inject CuotasCXCService cuotasCXCServices
@inject NavigationManager navigation

<PageTitle>Crear Cuenta x Cobrar</PageTitle>
<div class="container mb-4">
	<div class="card">
		<div class="text-left">
			<h2 class="text-black" style="background-color:white; padding:5px;"><i class="bi bi-cash-stack m-1"></i>Nueva Cuenta x Cobrar</h2>
		</div>
	</div>
</div>

<EditForm Model="CuentaXCobrar" OnValidSubmit="Guardar">
	<DataAnnotationsValidator />
	<div class="contenedor">
		<div class="card">
			<div class="card-body">

				<div class="section-title">Complete la información</div>

				<div class="row mb-3">
					<div class="col">
						<label class="form-label"><strong>Orden de Venta *</strong></label>
						<InputSelect required class="form-select" @bind-Value="CuentaXCobrar.OrdenVentaId">
							<option selected disabled value="0">-- Seleccione una Orden de Venta--</option>
							@foreach (var ordenVenta in ListaOrdenVenta)
							{
								<option value="@ordenVenta.OrdenVentaId">Codigo: @ordenVenta.NumeroFactura -- Deudor: @ordenVenta.Clientes?.Nombre -- Capital: RD$@ordenVenta.MontoTotal.ToString("N2")</option>
							}
						</InputSelect>
					</div>
				</div>

				<div class="row mb-3">
					<div class="col">
						<label><strong>% de interes *</strong></label>
						<InputNumber class="form-control" @bind-Value="CuentaXCobrar.Interes" placeholder="123"></InputNumber>
					</div>
					<div class="col">
						<label><strong>Plazos *</strong></label>
						<InputNumber class="form-control" @bind-Value="CuentaXCobrar.Periodos" placeholder="123"></InputNumber>
					</div>
				</div>

				<div class="text-center">
					<button type="submit" class="btn btn-success bi bi-floppy">   Guardar</button>
					<a href="/Cuentas-Por-Cobrar/Index" class="btn btn-secondary bi bi-arrow-left-circle">   Volver</a>
				</div>
			</div>
		</div>
	</div>

</EditForm>

<style>
	body {
	background-color: #f5f5f5;
	}

	.contenedor {
	max-width: 800px;
	margin: auto;
	padding: 10px;
	}

	.card {
	background: white;
	padding: 20px;
	border-radius: 10px;
	}

	.section-title {
	background: #0d5c63;
	color: white;
	text-align: center;
	font-weight: bold;
	padding: 8px;
	margin: 10px;
	border-radius: 5px;
	}

	.btn-success {
	background-color: #0d5c63;
	border: none;
	margin: 10px;
	padding: 10px 20px;
	}

	.btn-secondary {
	background-color: #444;
	color: white;
	text-decoration: none;
	margin: 10px;
	padding: 10px 20px;
	}

	.btn-secondary:hover {
	background-color: #222;
	}
</style>

@code {
	public int ClienteId { get; set; }
	public CuentasXCobrar CuentaXCobrar { get; set; } = new();
	public OrdenVenta OrdenVenta { get; set; } = new();
	public List<OrdenVenta> ListaOrdenVenta { get; set; } = [];

	[Inject] protected ToastService ToastService { get; set; }

	protected override async Task OnInitializedAsync()
	{
		ListaOrdenVenta = await OrdenVentaServices.Listar(o => true);
	}

	public async Task CalcularCuotas()
	{
		var ListaCuotas = await cuotasCXCServices.CalcularCuotas(CuentaXCobrar);
		if (!await cuotasCXCServices.Guardar(ListaCuotas))
		{
			ToastService.Notify(new(ToastType.Danger, "Error", $"No se pudo calcular las cuotas."));
			return;
		}
		else
			ToastService.Notify(new(ToastType.Success, "Éxito", $"Se han calculado las cuotas de la Cuenta X Cobrar con ID: {CuentaXCobrar.CXCId}"));
	}

	public async Task Guardar()
	{
		if (CuentaXCobrar.OrdenVentaId <= 0)
		{
			ToastService.Notify(new(ToastType.Danger, "Error", $"Debe seleccionar una Orden de Venta."));
			return;
		}

		if (CuentaXCobrar.Interes <= 0)
		{
			ToastService.Notify(new(ToastType.Danger, "Error", $"El interés no puede ser menor que 1."));
			return;
		}

		if (CuentaXCobrar.Periodos < 3)
		{
			ToastService.Notify(new(ToastType.Danger, "Error", $"Los plazos no pueden ser menor que 3."));
			return;
		}

		CuentaXCobrar.EstadoId = 1;

		foreach (var orden in ListaOrdenVenta)
		{
			if (CuentaXCobrar.OrdenVentaId == orden.OrdenVentaId)
			{
				CuentaXCobrar.Capital = orden.MontoTotal;
			}
		}

		await DeudaServices.Guardar(CuentaXCobrar);
		await CalcularCuotas();

		ToastService.Notify(new(ToastType.Success, "Éxito", $"Cuenta X Cobrar con ID: {CuentaXCobrar.CXCId} creada correctamente."));
		navigation.NavigateTo("/Cuentas-Por-Cobrar/Index");
	}
}
