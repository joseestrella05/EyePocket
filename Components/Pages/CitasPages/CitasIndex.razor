@page "/Cita/Index"
@inject CitasService citaService
@inject ToastService toastService

@rendermode InteractiveServer

<PageTitle>Gestión de Citas</PageTitle>
<div class="row" style="background-color:white; padding:10px; margin:10px;">
	<div class="col">
		<div class="text-left">
			<h2 class="text-black"><i class="bi bi-calendar-check m-1"></i> Gestión de Citas</h2>
		</div>
	</div>
	<div class="col">
		<a href="/Cita/Create" class="btn btn-secondary">Crear nueva cita</a>
	</div>
</div>

<div class="container">
	<div class="card">
		<div class="card-body">
			<div class="row">
				<div class="col-4">
					<div class="input-group" style="width: 250px">
						<div class="form-floating">
							<InputSelect class="form-select" id="floatingSelect" aria-label="Filtro" @bind-Value="valorFiltro">
								<option value="" selected disabled>--- Selecciona ---</option>
								<option value="idcita">ID Cita</option>
								<option value="nombre">Nombre</option>
								<option value="fecha">Fecha</option>
							</InputSelect>
							<label for="floatingSelect"><strong>Filtrar por...</strong></label>
						</div>
						<button type="button" class="btn btn-secondary bi bi-arrow-counterclockwise" @onclick="Restablecer"></button>
					</div>
				</div>

				<div class="col">
					<div class="input-group" style="width: 500px">
						<div class="form-floating d-flex align-items-center">
							<InputText @bind-Value="searchBarValue" class="form-control" placeholder="" id="floatingSearch" />
							<label for="floatingSearch">Buscar</label>
						</div>
						<button @onclick="Buscar" class="btn btn-secondary bi bi-search" type="button"></button>
					</div>
				</div>
			</div>

			<br />

			<table class="table table-light table-hover">
				<thead class="table table-striped">
					<tr class="text-center">
						<th>ID</th>
						<th>Nombre</th>
						<th>Fecha</th>
						<th>Hora</th>
						<th>Estado</th>
						<th>Asunto</th>
						<th>Acciones</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var cita in ListaCitas)
					{
						<tr class="text-center">
							<td>@cita.Id</td>
							<td>@cita.Nombre_Persona</td>
							<td>@cita.Fecha.ToShortDateString()</td>
							<td>@cita.Hora</td>
							<td>@cita.Estado</td>
							<td>@cita.AsuntoCita</td>
							<td>
								<a href="/Cita/Edit/@cita.Id" class="btn btn-outline-info bi bi-pencil-square"></a>
								<button type="button" class="btn btn-outline-danger bi bi-trash" @onclick="() => EliminarCita(cita.Id)"></button>
							</td>
						</tr>
					}
				</tbody>
				<caption>Cant. de citas: @ListaCitas.Count</caption>
			</table>
		</div>
	</div>
</div>

@code {
	public string searchBarValue { get; set; } = string.Empty;
	public string valorFiltro { get; set; } = string.Empty;
	public List<Citas> ListaCitas { get; set; } = new List<Citas>();

	protected override async Task OnInitializedAsync()
	{
		ListaCitas = await citaService.Listar(c => true);
	}

	public async Task Buscar()
	{
		if (string.IsNullOrEmpty(valorFiltro))
		{
			toastService.Notify(new(ToastType.Warning, "Aviso", "Debe seleccionar una opción en el filtro."));
			ListaCitas = await citaService.Listar(c => true);
			return;
		}

		searchBarValue = searchBarValue.Trim().ToLower();

		switch (valorFiltro)
		{
			case "idcita":
				if (int.TryParse(searchBarValue, out int id))
					ListaCitas = await citaService.Listar(c => c.Id == id);
				break;
			case "nombre":
				ListaCitas = await citaService.Listar(c => c.Nombre_Persona.ToLower().Contains(searchBarValue));
				break;
			case "fecha":
				if (DateTime.TryParse(searchBarValue, out DateTime fecha))
					ListaCitas = await citaService.Listar(c => c.Fecha.Date == fecha.Date);
				break;
			default:
				ListaCitas = await citaService.Listar(c => true);
				break;
		}
	}

	public async Task Restablecer()
	{
		ListaCitas = await citaService.Listar(c => true);
		searchBarValue = string.Empty;
		valorFiltro = string.Empty;
		toastService.Notify(new(ToastType.Info, "Aviso", "Se han restablecido los criterios de búsqueda."));
	}
	
	public async Task EliminarCita(int id)
	{
			bool exito = await citaService.Eliminar(id);

			if (exito)
			{
				toastService.Notify(new(ToastType.Success, "Éxito", "Cita eliminada correctamente"));
				// Refrescar la lista de citas
				ListaCitas = await citaService.Listar(c => true);
			}
		
		}
	}

	
}
